// #1
#include <cstring>
#include <stack>
#include <iostream>

using namespace std;

int main(){
    
stack<int> s;
string str;
int n;

  while(cin>>str){

    if (str == "push"){
      cin>>n;
      s.push(n);
      cout<<"ok"<<endl;
    }
    else if (str == "pop"){
      cout<<s.top()<<endl;
      s.pop();
    }
    else if (str == "back"){
      cout<<s.top()<<endl;
    } 
    else if (str == "size"){
      cout<<s.size()<<endl;
    } 
    else if (str == "clear"){
      while(!s.empty()) s.pop();
      cout<<"ok"<<endl;
    } 
    else {
      cout<<"bye"<<endl;
      break;
    }
  }
  return 0;
}

// #2
#include <cstring>
#include <stack>
#include <iostream>

using namespace std;

int main(){
    
stack<int> s;
string str;
int n;

  while(cin>>str){

    if (str == "push"){
      cin>>n;
      s.push(n);
      cout<<"ok"<<endl;
    }
    else if (str == "pop"){
      if(!s.empty()){
        cout<<s.top()<<endl;
        s.pop();
      }
      else{
        cout<<"error"<<endl;
      }
    }
    else if (str == "back"){
      if(!s.empty()){
        cout<<s.top()<<endl;
      }
      else{
        cout<<"error"<<endl;
      }
    } 
    else if (str == "size"){
      cout<<s.size()<<endl;
    } 
    else if (str == "clear"){
      while(!s.empty()) s.pop();
      cout<<"ok"<<endl;
    } 
    else {
      cout<<"bye"<<endl;
      break;
    }
  }
  return 0;

}

// #3
#include <cstring>
#include <queue>
#include <iostream>

using namespace std;

int main(){
    
queue<int> s;
string str;
int n;

  while(cin>>str){

    if (str == "push"){
      cin>>n;
      s.push(n);
      cout<<"ok"<<endl;
    }
    else if (str == "pop"){
        cout<<s.front()<<endl;
        s.pop();
    }
    else if(str == "front"){
        cout<<s.front()<<endl;
    }
    else if (str == "size"){
      cout<<s.size()<<endl;
    } 
    else if (str == "clear"){
      while(!s.empty()) s.pop();
      cout<<"ok"<<endl;
    } 
    else {
      cout<<"bye"<<endl;
      break;
    }
  }
  return 0;

}

// #4
#include <cstring>
#include <queue>
#include <iostream>

using namespace std;

int main(){
    
queue<int> s;
string str;
int n;

  while(cin>>str){

    if (str == "push"){
      cin>>n;
      s.push(n);
      cout<<"ok"<<endl;
    }
    else if (str == "pop"){
      if(!s.empty()){
        cout<<s.front()<<endl;
        s.pop();
      }
      else{
        cout<<"error"<<endl;
      }
    }
    else if(str == "front"){
      if(!s.empty()){
        cout<<s.front()<<endl;
      }
      else{
        cout<<"error"<<endl;
      }
    }
    else if (str == "size"){
      cout<<s.size()<<endl;
    } 
    else if (str == "clear"){
      while(!s.empty()) s.pop();
      cout<<"ok"<<endl;
    } 
    else {
      cout<<"bye"<<endl;
      break;
    }
  }
  return 0;

}

// #5 
#include <cstring>
#include <deque>
#include <iostream>

using namespace std;

int main(){
    
deque<int> s;
string str;
int n;

  while(cin>>str){

    if (str == "push_front"){
      cin>>n;
      s.push_front(n);
      cout<<"ok"<<endl;
    }
    else if (str == "push_back"){
      cin>>n;
      s.push_back(n);
      cout<<"ok"<<endl;
    }
    else if (str == "pop_front"){
        cout<<s.front()<<endl;
        s.pop_front();
    }
    else if (str == "pop_back"){
        cout<<s.back()<<endl;
        s.pop_back();
    }
    else if(str == "front"){
        cout<<s.front()<<endl;
    }
    else if(str == "back"){
        cout<<s.back()<<endl;
    }
    else if (str == "size"){
      cout<<s.size()<<endl;
    } 
    else if (str == "clear"){
        s.clear();
      cout<<"ok"<<endl;
    } 
    else {
      cout<<"bye"<<endl;
      break;
    }
  }
  return 0;

}

// #6
#include <cstring>
#include <deque>
#include <iostream>

using namespace std;

int main(){
    
deque<int> s;
string str;
int n;

  while(cin>>str){

    if (str == "push_front"){
      cin>>n;
      s.push_front(n);
      cout<<"ok"<<endl;
    }
    else if (str == "push_back"){
      cin>>n;
      s.push_back(n);
      cout<<"ok"<<endl;
    }
    else if (str == "pop_front"){
      if(!s.empty()){
        cout<<s.front()<<endl;
        s.pop_front();
      }
      else {
          cout<<"error"<<endl;
      }
    }
    else if (str == "pop_back"){
      if(!s.empty()){
        cout<<s.back()<<endl;
        s.pop_back();
      }
      else{
        cout<<"error"<<endl;
      }
    }
    else if(str == "front"){
      if(!s.empty()){
        cout<<s.front()<<endl;
      }
      else{
        cout<<"error"<<endl;
      }
    }
    else if(str == "back"){
      if(!s.empty()){
        cout<<s.back()<<endl;
      }
      else{
        cout<<"error"<<endl;
      }
    }
    else if (str == "size"){
      cout<<s.size()<<endl;
    } 
    else if (str == "clear"){
        s.clear();
      cout<<"ok"<<endl;
    } 
    else {
      cout<<"bye"<<endl;
      break;
    }
  }
  return 0;

}

// #7
#include <queue>
#include <iostream>
using namespace std;

int main(){
queue<pair<int, string>> q1;
queue<pair<int, string>> q2;
queue<pair<int, string>> q3;
pair<int, string> p;
string str;
int n;

  while(cin>>n){
      cin>>str;
      p.first = n;
      p.second = str;
      if(n == 9){
          q1.push(p);
      }
      else if(n == 10){
          q2.push(p);
      }
      else {
          q3.push(p);
      }
  }
  while(!q1.empty()){
      cout<<q1.front().first<<" "<<q1.front().second<<endl;
      q1.pop();
  }
  while(!q2.empty()){
      cout<<q2.front().first<<" "<<q2.front().second<<endl;
      q2.pop();
  }
  while(!q3.empty()){
      cout<<q3.front().first<<" "<<q3.front().second<<endl;
      q3.pop();
  }
  return 0;

}

// #8
#include <queue>
#include <iostream>
using namespace std;

int main(){
queue<int> q1;
queue<int> q2;
int n;
int L;
for(int i = 0; i < 5; i++){
    cin>>n;
    q1.push(n);
}
for(int i = 0; i < 5; i++){
    cin>>n;
    q2.push(n);
}
for(int i = 0; i < 1000000; i++){
    if((q1.front() == 0 && q2.front() == 9) || q1.front() > q2.front() && !(q2.front() == 0 && q1.front() == 9)){
        L = q1.front();
        q1.pop();
        q1.push(L);
        q1.push(q2.front());
        q2.pop();
    }
    else if((q2.front() == 0 && q1.front() == 9) || q2.front() > q1.front() ){
        L = q2.front();
        q2.pop();
        q2.push(q1.front());
        q1.pop();
        q2.push(L);
    }
    if(q2.empty()){
        cout<<"first"<<endl<<++i;
        return 0;
    }
    else if(q1.empty()){
        cout<<"second"<<endl<<++i;
        return 0;
    }
}
cout<<"botva";
  return 0;
}

// #9
#include <iostream>
#include <stack>
using namespace std;

int main()
{
    stack<char> st;
   string s;
   cin >> s;
   for(int i = 0; i < s.length(); i++){
       if(s[i] == '[' || s[i] == '(' || s[i] == '{'){
           st.push(s[i]);
       }
       else if(st.empty() || st.top() != '(' && s[i] == ')' || 
       st.top() != '[' && s[i] == ']' || st.top() != '{' && s[i] == '}'){
           cout<<"no";
           return 0;
       }
       else {
           st.pop();
       }
   }
   if(st.empty()){
       cout<<"yes";
   }
   else{
       cout<<"no";
   }
}

// #10
#include <stack>
#include <iostream>
using namespace std;

int main(){
    char ch;
    stack<int> s;
    int n1, n2;
    while(cin>>ch){
        if(ch >= '0' && ch <= '9'){
            s.push(ch-'0');
        }
        else if(ch == '+'){
            n1 = s.top();
            s.pop();
            n2 = s.top();
            s.pop();
            s.push(n1+n2);
        }
        else if(ch == '-'){
            n1 = s.top();
            s.pop();
            n2 = s.top();
            s.pop();
            s.push(n2-n1);
        }
        else if(ch == '*'){
            n1 = s.top();
            s.pop();
            n2 = s.top();
            s.pop();
            s.push(n1*n2);
        }
    }
    cout<<s.top();
  return 0;

}
// #11
#include <deque>
#include <iostream>
using namespace std;

int main(){
    char ch;
    deque<int> dq1;
    deque<int> dq2;
    int n;
    int L;
    int N;
    cin >> n;
    for(int i = 0; i < n; i++){
        cin >> ch;
        if(ch == '+'){
            cin >> L;
            dq2.push_back(L);
        }
        else if(ch == '-'){
            cout<<dq1.front()<<endl;
            dq1.pop_front();
        }
        else {
            cin >> L;
           dq2.push_front(L);
        }
        if(dq2.size() > dq1.size()){
               N = dq2.front();
               dq2.pop_front();
               dq1.push_back(N);
         }
    }
  return 0;
}

// #12
class Solution {
public:
    bool isValid(string s) {
          stack<char> st;
   for(int i = 0; i < s.length(); i++){
       if(s[i] == '[' || s[i] == '(' || s[i] == '{'){
           st.push(s[i]);
       }
       else if(st.empty() || st.top() != '(' && s[i] == ')' || 
       st.top() != '[' && s[i] == ']' || st.top() != '{' && s[i] == '}'){
          
           return false;
       }
       else {
           st.pop();
       }
   }
   if(st.empty()){
       return true;
   }
   else{
       return false;
   }
    }
};

//#13
class MinStack {
public:
    MinStack() {
        
    }
    stack<int> s, m;
  void push(int x){
   s.push(x);
   if (m.empty())
      m.push(x);
    else
      m.push(min(x, m.top()));
  }
    
  void pop(){
    s.pop();
    m.pop();
  }
    
int top(){
    return s.top();
  }
    
int getMin(){
    return m.top();
  }
};

// #14
class Solution {
public:
    bool backspaceCompare(string S, string T) {
        stack<char> st1;
        stack<char> st2;
        for(int i = 0; i < S.length(); i++){
            if(S[i] == '#'){
                if(!st1.empty())
                st1.pop();
            }
            else{
                st1.push(S[i]);
            }
        }
        for(int i = 0; i < T.length(); i++){
            if(T[i] == '#'){
                if(!st2.empty())
                st2.pop();
            }
            else{
                st2.push(T[i]);
            }
        }
        if(st1 == st2){
            return true;
        }
        else{
            return false;
        }
    }
};

// #15
#include <cctype>
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
    char ch;
    stack<int> s;
    int n1, n2;
    for(auto str : tokens){
        if(str == "+"){
            n1 = s.top();
            s.pop();
            n2 = s.top();
            s.pop();
            s.push(n1+n2);
        }
        else if(str == "-"){
            n1 = s.top();
            s.pop();
            n2 = s.top();
            s.pop();
            s.push(n2-n1);
        }
        else if(str == "*"){
            n1 = s.top();
            s.pop();
            n2 = s.top();
            s.pop();
            s.push(n1*n2);
        }
        else if(str == "/"){
            n1 = s.top();
            s.pop();
            n2 = s.top();
            s.pop();
            s.push(n2/n1);
        }
        
        else {
            s.push(stoi(str));
        }
    }
    return s.top();
    }
};